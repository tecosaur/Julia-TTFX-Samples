name: Create TTFX snippet PR

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  newtask-to-pr:
    if: contains(github.event.issue.labels.*.name, 'üõ† newtask')
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Label issue as running
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['‚öôÔ∏è running']
            });

      - uses: actions/checkout@v3

      - name: Parse issue form fields
        id: parser
        uses: stefanbuck/github-issue-parser@v3
        with:
          template-path: .github/ISSUE_TEMPLATE/create-task.yml

      - name: Cache Julia installs
        id: cache-juliaup
        uses: actions/cache@v3
        with:
          path: ~/.local/share/julia-multi
          key: ${{ runner.os }}-julias
          restore-keys: |
            ${{ runner.os }}-julia-multi

      - name: Install julias
        uses: actions/github-script@v7
        with:
          script: |
            const fs     = require('fs');
            const os     = require('os');
            const path   = require('path');
            const crypto = require('crypto');
            // built-ins: core, exec, io

            // simple retry helper
            async function retry(fn, retries = 5, delay = 1000) {
              for (let i = 0; i < retries; i++) {
                try { return await fn(); }
                catch (e) {
                  core.info(`Retry #${i+1} failed: ${e.message}`);
                  if (i === retries - 1) throw e;
                  await new Promise(r => setTimeout(r, delay));
                }
              }
            }

            // compare x.y.z semvers
            function cmpVer(a, b) {
              const pa = a.split('.').map(n => +n), pb = b.split('.').map(n => +n);
              for (let i = 0; i < 3; i++) {
                if (pa[i] !== pb[i]) return pa[i] - pb[i];
              }
              return 0;
            }

            (async () => {
              const home    = os.homedir();
              const baseDir = path.join(home, '.local/share/julia-multi');
              const binDir  = path.join(home, '.local/bin');
              await io.mkdirP(baseDir);
              await io.mkdirP(binDir);

              // 1) fetch or reuse versions.json if <24 h old
              const metaPath = path.join(baseDir, 'versions.json');
              let needFetch = true;
              if (fs.existsSync(metaPath)) {
                const stats = fs.statSync(metaPath);
                const ageMs  = Date.now() - stats.mtimeMs;
                if (ageMs < 24 * 60 * 60 * 1000) {
                  needFetch = false;
                  core.info('‚úì Using cached versions.json');
                }
              }
              if (needFetch) {
                core.info('‚Üª Downloading fresh versions.json');
                await retry(() =>
                  exec.exec('curl', [
                    '-sSL',
                    'https://julialang-s3.julialang.org/bin/versions.json',
                    '-o', metaPath
                  ])
                );
              }

              // 2) parse metadata and list all versions
              const info = JSON.parse(fs.readFileSync(metaPath, 'utf8'));
              const all  = Object.keys(info);

              // 3) compute unique sorted minors
              const minors = [...new Set(
                all
                  .filter(v => v.startsWith('1.'))
                  .filter(v => !v.includes('-'))
                  .map(v => v.split('.').slice(0,2).join('.'))
              )].sort(cmpVer);

              // 4) platform/arch maps
              const platMap = { linux:'linux', darwin:'mac', win32:'winnt' };
              const archMap = { x64:'x86_64', ia32:'i686', arm64:'aarch64' };
              const plat    = platMap[os.platform()];
              const arch    = archMap[os.arch()] || os.arch();

              // 5) loop minors: install latest patch, prune old, symlink
              for (const m of minors) {
                // pick latest patch
                const version = all
                  .filter(v => v.startsWith(m + '.'))
                  .reduce((best, v) => cmpVer(v, best) > 0 ? v : best, m + '.0');

                core.info(`‚Üí Julia ${version}`);
                const entry = info[version];
                const file  = entry.files.find(f =>
                  f.os === plat && f.arch === arch && f.extension === 'tar.gz'
                );
                if (!file) throw new Error(`no tar.gz for ${version} on ${plat}/${arch}`);

                // derive folder name
                const fname      = path.basename(file.url);
                const folderName = fname.replace(/\.tar\.gz$/, '');
                const installDir = path.join(baseDir, folderName);

                // install if missing
                if (!fs.existsSync(installDir)) {
                  const dlPath = path.join(baseDir, fname);
                  await retry(() => exec.exec('curl', ['-sSL', file.url, '-o', dlPath]));
                  const sum = crypto.createHash('sha256')
                                    .update(fs.readFileSync(dlPath))
                                    .digest('hex');
                  if (sum !== file.sha256) throw new Error(`checksum mismatch for ${version}`);
                  await io.mkdirP(installDir);
                  await exec.exec('tar', ['xf', dlPath, '--strip-components=1', '-C', installDir]);
                } else {
                  core.info(`  ‚Ü≥ cached at ${installDir}`);
                }

                // prune older patch dirs for this minor
                const siblings = fs.readdirSync(baseDir).filter(name =>
                  fs.lstatSync(path.join(baseDir, name)).isDirectory() &&
                  name.startsWith(folderName.split('.').slice(0,2).join('.')) &&
                  name !== folderName
                );
                for (const old of siblings) {
                  await io.rmRF(path.join(baseDir, old));
                  core.info(`  ‚Ü≥ removed old version: ${old}`);
                }

                // update symlink for this minor
                const linkName = `julia-${m}`;
                const linkPath = path.join(binDir, linkName);
                const target   = path.join(installDir, 'bin', 'julia');
                if (fs.existsSync(linkPath)) fs.unlinkSync(linkPath);
                fs.symlinkSync(target, linkPath);
                core.info(`  ‚Ü≥ symlinked ${linkName} ‚Üí ${target}`);
              }

              // 6) default "julia" ‚Üí highest-minor
              const lastMinor = minors[minors.length - 1];
              const lastVersion = all
                .filter(v => v.startsWith(lastMinor + '.'))
                .reduce((best, v) => cmpVer(v, best) > 0 ? v : best, lastMinor + '.0');
              const lastEntry = info[lastVersion];
              const lastFile  = lastEntry.files.find(f =>
                f.os === plat && f.arch === arch && f.extension === 'tar.gz'
              );
              const lastFolder = path.basename(lastFile.url).replace(/\.tar\.gz$/, '');
              const lastDir    = path.join(baseDir, lastFolder);
              const defaultLink= path.join(binDir, 'julia');
              if (fs.existsSync(defaultLink)) fs.unlinkSync(defaultLink);
              fs.symlinkSync(path.join(lastDir, 'bin', 'julia'), defaultLink);
              core.info(`‚Ü≥ default symlinked "julia" ‚Üí ${lastVersion}`);
            })().catch(err => {
              core.error(err);
              process.exit(1);
            });

      - name: Run create-snippet.jl
        id: gensnippet
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ISSUE_NUMBER: ${{ github.event.issue.number }}
          SNIPPET_NAME: ${{ steps.parser.outputs.issueparser_task_name }}
          SNIPPET_PACKAGE: ${{ steps.parser.outputs.issueparser_primary_package }}
          SNIPPET_DEPS: ${{ steps.parser.outputs.issueparser_dependencies }}
          SNIPPET_AUTHOR: ${{ github.event.issue.user.login }}
          SNIPPET_ATTRIBUTION: ${{ steps.parser.outputs.issueparser_attribution }}
          SNIPPET_TASK_CODE: ${{ steps.parser.outputs.issueparser_task_code }}
        run: |
          set -euo pipefail
          julia create-snippet.jl \
            --name "$SNIPPET_NAME" \
            --package "$SNIPPET_PACKAGE" \
            --deps "$SNIPPET_DEPS" \
            --author "$SNIPPET_AUTHOR" \
            --attribution "$SNIPPET_ATTRIBUTION" \
            --snippet "$SNIPPET_TASK_CODE" \
            2>&1 | tee create-snippet-logs.txt

      - name: Remove logs on success
        if: steps.gensnippet.outcome == 'success'
        run: rm -f create-snippet-logs.txt

      - name: Create Pull Request
        id: create_pr
        if: steps.gensnippet.outcome == 'success'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          author: ${{ github.event.issue.user.login }} <${{ github.event.issue.user.login }}@users.noreply.github.com>
          committer: GitHub Actions <actions@github.com>
          commit-message: |
            ${{ steps.gensnippet.outputs.task_nature }}: ${{ steps.parser.outputs.issueparser_primary_package }}, ${{ steps.parser.outputs.issueparser_task_name }}
          branch: ttfx-snippet-${{ github.event.issue.number }}
          title: "${{ steps.gensnippet.outputs.task_nature }}: ${{ steps.parser.outputs.issueparser_primary_package }}, ${{ steps.parser.outputs.issueparser_task_name }}"
          body: |
            ### Task summary
            **Package:** ${{ steps.parser.outputs.issueparser_primary_package }} (by ${{ steps.gensnippet.outputs.pkg_repo_owner }})
            **Task:** ${{ steps.parser.outputs.issueparser_task_name }}
            **Submitted by:** @${{ github.event.issue.user.login }}

            ### Task timings
            - Installation time: `${{ steps.gensnippet.outputs.task_time_install }}`s
            - Package loading: `${{ steps.gensnippet.outputs.task_time_using }}`s
            - Task script: `${{ steps.gensnippet.outputs.task_time_script }}`s
            - Total time: `${{ steps.gensnippet.outputs.task_time_total }}`s

            ###### Closes #${{ github.event.issue.number }}
          labels: ü§ñ automated-ttfx-snippet
          base: main

      - name: Label automerge when author is package owner
        if: steps.gensnippet.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = '${{ steps.gensnippet.outputs.pkg_repo_owner }}';
            const repo  = '${{ steps.gensnippet.outputs.pkg_repo_name }}';
            if (!owner || !repo) {
              console.log("No upstream repo detected; skipping automerge.");
              return;
            }

            const user = context.payload.issue.user.login;

            if (user === owner) {
              console.log(`Issue author ${user} is the repo owner; auto-merging.`);
            } else {
              const { data: repoMeta } = await github.rest.repos.get({ owner, repo });
              if (repoMeta.owner.type === 'Organization') {
                const { data: orgs } = await github.rest.orgs.listForUser({ username: user });
                const isMember = orgs.some(o => o.login === owner);
                if (isMember) {
                  console.log(`${user} is a public member of org ${owner}; auto-merging.`);
                } else {
                  console.log(`${user} is not a public member of ${owner}; skipping.`);
                  return;
                }
              } else {
                console.log(`${owner} is a user, not an org; skipping org-member check.`);
                return;
              }
            }

            const prNumber = parseInt('${{ steps.create_pr.outputs.pull-request-number }}', 10);
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: prNumber,
              labels: ['automerge']
            });
            console.log("Added `automerge` label to PR #" + prNumber);

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              pull_number: prNumber
            });
            const msg = "\n\n‚öôÔ∏è **Auto-merge**: This PR has been identified as originating from a maintainer of the target package.";
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              pull_number: prNumber,
              body: pr.body + msg
            });

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              pull_number: prNumber,
              merge_method: 'rebase'
            });

      - name: Remove running label from issue
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                name: '‚öôÔ∏è running'
              });
            } catch (e) {
              /* ignore if already removed */
            }

      - name: Handle failure
        if: steps.gensnippet.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const logs = fs.readFileSync('create-snippet-logs.txt', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body:
                "‚ö†Ô∏è `create-snippet.jl` failed. Logs (look for an error at the end):\n\n```bash\n" +
                logs +
                "\n```\n\nIf you can resolve the error, please open a new task issue with corrected code."
            });
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['failed']
            });

      - name: Close issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              state: 'closed'
            });
